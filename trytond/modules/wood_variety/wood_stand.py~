#coding: utf-8
"""

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

Copyright (c) 2012-2013 Bio Eco Forests <contact@bioecoforests.com>
Copyright (c) 2012-2013 Laurent Defert

"""

from trytond.model import fields, ModelSQL, ModelView
from trytond.pyson import Eval

STATES = {'readonly': ~Eval('active', True)}
DEPENDS = ['active']


class WoodStand(ModelView, ModelSQL):
    "Wood stand"
    __name__ = "wood_variety.stand"
    code = fields.Char('Code', required=True, on_change_with=['parent'],
                       depends=DEPENDS, states=STATES)
    name = fields.Char('Short wording', required=True, on_change_with=['parent'],
                       depends=DEPENDS, states=STATES)
    description = fields.Text('Long wording', on_change_with=['parent'],
                              depends=DEPENDS, states=STATES)
    r = fields.Integer(
            string=u'Red color',
            help=u'Red of RGB color',
            depends=DEPENDS,
            states=STATES
        )

    g = fields.Integer(
            string=u'Green color',
            help=u'Green of RGB color',
            depends=DEPENDS,
            states=STATES
        )

    b = fields.Integer(
            string=u'Blue color',
            help=u'Blue of RGB color',
            depends=DEPENDS,
            states=STATES
        )

    parent = fields.Many2One('wood_variety.stand', 'Parent', ondelete='RESTRICT',
                             depends=DEPENDS, states=STATES)
    children = fields.One2Many('wood_variety.stand', 'parent', 'Children',
                               depends=DEPENDS, states=STATES)
    active = fields.Boolean('Active', select=True)

    @classmethod
    def __setup__(cls):
        super(WoodVariety, cls).__setup__()
        cls._sql_constraints += [
            ('name_uniq', 'UNIQUE(name)', 'The short wording must be unique!'),
            ('code_uniq', 'UNIQUE(code)', 'The code must be unique!'),
        ]
        cls.on_change_with_code = lambda x: cls.on_parent_change(x, 'code')
        cls.on_change_with_name = lambda x: cls.on_parent_change(x, 'name')
        cls.on_change_with_description = lambda x: cls.on_parent_change(x, 'description')

    @staticmethod
    def default_active():
        """Active by default"""
        return True

    def on_parent_change(self, field):
        """When the parent is changed copy all attributes of the parent
        to ease attribute input"""
        if self.parent is None:
            return None
        val = getattr(self.parent, field)
        return val

